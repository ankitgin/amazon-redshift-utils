AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Configuration
        Parameters:
          - clusterName
      -
        Label:
          default: Run Schedule Cron Expressions
        Parameters:
          - scheduleRedshiftDeleteTrigger
      -
        Label:
          default: Timing Parameters
        Parameters:
          - creationTimeHour
          - creationTimeMinute
    ParameterLabels:
      clusterName:
        default: Cluster name
      scheduleRedshiftDeleteTrigger:
        default: Delete schedule
      creationTimeHour:
        default: Cluster creation hour
      creationTimeMinute:
        default: Cluster creation minutes
Parameters:
  clusterName:
    Default: ondemandredshift
    Description: Name of the cluster that you want to delete and later restore the cluster from snapshot
    Type: String
  scheduleRedshiftDeleteTrigger:
    Default: 0 20 * * ? *
    Description: Cron expression for deleting the cluster.
    Type: String
    AllowedPattern: ^([0-5]?[0-9]|\*|\,|\-|\/) ([ 01]?[0-9]|2[0-3]|\*|\,|\-|\/) ([ 012]?[1-9]|3[01]|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|\*|\,|\-|\/|\?|L|W) ([0]?[1-9]|1[0-2]|\*|\,|\-|\/) ([1-7]|MON|TUE|WED|THU|FRI|SAT|SUN|\*|\,|\-|\/|\?|L|\#) (19[7-9][0-9]|2[01][0-9][0-9]|\*|\,|\-|\/)$
  creationTimeHour:
    Default: 21
    Description: Enter hour in UTC when you want to create the cluster values can be 0 to 23. Example 15
    Type: String
    AllowedPattern: ^(2[0-3]|[01]?[0-9])$
  creationTimeMinute:
    Default: 30
    Description: Enter minutes in UTC when you want to create the cluster values can be 0 to 59. Example 58
    Type: String
    AllowedPattern: ^([0-5]?[0-9])$
Resources:
  LambdaRedshiftAutomation:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Redshift-ondemand-function.lambda_handler
      Runtime: python3.6
      CodeUri:
        Bucket: !Sub awslabs-code-${AWS::Region}
        Key: Redshift-ondemand-function.py.zip
      MemorySize: 192
      Timeout: 300
      Tags:
        Name: OnDemandRedshiftLambda
      Role: !GetAtt RedshiftAutomationIAMRole.Arn
  RedshiftAutomationIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: "OnDemandRedshiftRole"
        Path: "/"
        ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "events.amazonaws.com"
                  - "ec2.amazonaws.com"
                  - "s3.amazonaws.com"
        Policies:
          -
            PolicyName: "OnDemandRedshiftLambda1"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                      - "iam:PassRole"
                      - "logs:CreateLogStream"
                      - "lambda:AddPermission"
                      - "lambda:InvokeFunction"
                      - "lambda:GetFunction"
                      - "lambda:CreateFunction"
                      - "redshift:DeleteCluster"
                      - "redshift:CreateCluster"
                      - "redshift:DescribeClusterSnapshots"
                      - "redshift:RestoreFromClusterSnapshot"
                      - "lambda:InvokeAsync"
                      - "logs:CreateLogGroup"
                      - "logs:PutLogEvents"
                      - "ec2:DescribeAccountAttributes"
                      - "ec2:DescribeAddresses"
                      - "ec2:DescribeAvailabilityZones"
                      - "ec2:DescribeSecurityGroups"
                      - "ec2:DescribeSubnets"
                      - "ec2:DescribeVpcs"
                      - "ec2:DescribeInternetGateways"
                      - "events:PutRule"
                      - "events:PutTargets"
                  Resource: "*"
          -
            PolicyName: "OnDemandRedshiftLambda2"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                      - "iam:CreateServiceLinkedRole"
                  Resource: "*"
  OnDemandRedshiftDeleteRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: 'Ondemand-deleteCluster-rule'
      Description: CloudWatch Events Rule to invoke Redshift Lambda function to create the snapshot and delete the cluster
      ScheduleExpression: !Sub cron(${scheduleRedshiftDeleteTrigger})
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaRedshiftAutomation.Arn
          Id: RedshiftCreation
          Input:
            !Sub |
                {
                  "Cluster":"${clusterName}",
                  "action":"delete",
                  "creationHour":"${creationTimeHour}",
                  "creationMin":"${creationTimeMinute}"
                }
  CWEventsRedshiftDeletePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaRedshiftAutomation.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt OnDemandRedshiftDeleteRule.Arn
